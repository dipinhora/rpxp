#+LaTeX_CLASS: sendence-com-article-2
#+TITLE: Cross Compile Pony
#+AUTHOR: Markus Fix
#+EMAIL: markus@sendence.com
#+DATE: 2016-0205
#+DESCRIPTION: How to create a cross compile Docker container for RPi code
#+KEYWORDS: Sendence, LBC, distributed, testing
#+LANGUAGE: english
#+STARTUP: overview
#+TAGS: PROJECT(p) HOME(h) OFFICE(o) PHONE(t) ERRANDS(e)
#+STARTUP: hidestars
#+LaTeX_CLASS_OPTIONS: [10pt,a4paper,captions=tableheading,headsepline,footsepline]
#+LateX_HEADER: \KOMAoptions{titlepage=true, abstract=true}
#+LaTeX_HEADER: \subtitle{Destructively Testing Distributed Systems Ideas Using a Pony}
#+LaTeX_HEADER: \usepackage{paralist}
#+LaTeX_HEADER: \usepackage{amssymb}
#+LaTeX_HEADER: \let\itemize\compactitem
#+LaTeX_HEADER: \let\description\compactdesc
#+LaTeX_HEADER: \let\enumerate\compactenum
#+LaTeX_CLASS_OPTIONS: [captions=tableheading]
#+LATEX: 
#+LATEX: \listoffigures


* Tools Needed
1. Docker
2. Emacs with org-mode (to edit this document)

* Create the Build Files
*This is a literate code document. In Emacs you can run =C-C C-V t= to
generate the build files for the Docker container.*

** Start Container Definition
We are starting from a =ubuntu:vivid= base image and define a
maintainer for this container image. 
#+BEGIN_SRC docker :tangle Dockerfile :padline yes
FROM ubuntu:vivid
MAINTAINER Markus Fix <lispmeister@gmail.com>
#+END_SRC

** Check Number of Bits
This is a 64 bit image which will be important later when we cross
compile.
#+BEGIN_SRC docker :tangle Dockerfile :padline yes
RUN echo "Is this a 32 or 64 bit platform: `/usr/bin/getconf LONG_BIT`"
#+END_SRC

** Install dependencies
Define the base image and install all packages our Pony build depends
on. We order the packages alphabetically to make it easir to patch the
list of packages later.
#+BEGIN_SRC docker :tangle Dockerfile :padline yes
RUN dpkg --add-architecture i386
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    automake \
    autotools-dev \
    build-essential \
    file \
    g++-multilib \
    gcc-multilib \
    git \
    libicu-dev:i386 \
    libncurses5-dev \
    libncurses5-dev:i386 \
    libpcre3 \
    libssl-dev \
    libxml2-dev:i386 \
    llvm-3.6:i386 \
    llvm:i386 \
    zlib1g-dev:i386 
#+END_SRC

** Cleanup
Save some space on the image by removing the apt cache.
#+BEGIN_SRC docker :tangle Dockerfile :padline yes
RUN apt-get clean && rm -rf /var/lib/apt/lists/*
#+END_SRC

** Install GCC Cross Compiler for ARM
#+BEGIN_SRC docker :tangle Dockerfile :padline yes
RUN mkdir -p /build
WORKDIR /build
RUN git clone git://github.com/raspberrypi/tools.git rpi-tools
ENV PATH=/build/rpi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin:$PATH
RUN ls /build/rpi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin
#+END_SRC

** Create Patches
#+BEGIN_SRC diff :tangle ponyc_armcc.patch :podline no
diff --git Makefile Makefile
index fdae42b..f81e854 100644
--- Makefile
+++ Makefile
@@ -36,6 +36,7 @@ endif
 # Default settings (silent debug build).
 config ?= debug
 arch ?= native
+bits ?= $(shell getconf LONG_BIT)

 ifndef verbose
   SILENT = @
@@ -76,7 +77,7 @@ ALL_CFLAGS = -std=gnu11 -fexceptions \
 ALL_CXXFLAGS = -std=gnu++11 -fno-rtti

 # Determine pointer size in bits.
-BITS := $(shell getconf LONG_BIT)
+BITS := $(bits)

 ifeq ($(BITS),64)
        BUILD_FLAGS += -mcx16
#+END_SRC

** Fetch
#+BEGIN_SRC docker :tangle Dockerfile :padline yes
RUN mkdir -p /build/pony
WORKDIR /build/arm
RUN git clone https://github.com/ponylang/ponyc.git
#+END_SRC


** Patch
#+BEGIN_SRC docker :tangle Dockerfile :padline yes
WORKDIR /build/arm/ponyc
COPY ponyc_armcc.patch /build/pony
RUN patch -p0 < /build/pony/ponyc_armcc.patch
#+END_SRC


** Build Pony RT for ARM
Cross compile the Pony RT library.
#+BEGIN_SRC docker :tangle Dockerfile :padline yes
RUN CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ \
    make arch=armv7-a bits=32 verbose=true libponyrt
#+END_SRC



** Patch
#+BEGIN_SRC diff :tangle ponyc_cross_compiler.patch :podline no
diff --git Makefile Makefile
index fdae42b..376acde 100644
--- Makefile
+++ Makefile
@@ -36,6 +36,7 @@ endif
 # Default settings (silent debug build).
 config ?= debug
 arch ?= native
+bits ?= $(shell getconf LONG_BIT)
 
 ifndef verbose
   SILENT = @
@@ -67,16 +68,16 @@ prefix ?= /usr/local
 destdir ?= $(prefix)/lib/pony/$(tag)
 
 LIB_EXT ?= a
-BUILD_FLAGS = -march=$(arch) -Werror -Wconversion \
+BUILD_FLAGS = -m$(bits) -march=$(arch) -Werror -Wconversion \
   -Wno-sign-conversion -Wextra -Wall
 LINKER_FLAGS = -march=$(arch)
 AR_FLAGS = -rcs
-ALL_CFLAGS = -std=gnu11 -fexceptions \
+ALL_CFLAGS = -m$(bits) -std=gnu11 -fexceptions \
   -DPONY_VERSION=\"$(tag)\" -DPONY_COMPILER=\"$(CC)\" -DPONY_ARCH=\"$(arch)\"
-ALL_CXXFLAGS = -std=gnu++11 -fno-rtti
+ALL_CXXFLAGS = -m$(bits) -std=gnu++11 -fno-rtti
 
 # Determine pointer size in bits.
-BITS := $(shell getconf LONG_BIT)
+BITS := $(bits)
 
 ifeq ($(BITS),64)
        BUILD_FLAGS += -mcx16
diff --git src/libponyc/codegen/codegen.c src/libponyc/codegen/codegen.c
index c9ce8dc..a94bef0 100644
--- src/libponyc/codegen/codegen.c
+++ src/libponyc/codegen/codegen.c
@@ -452,6 +452,7 @@ bool codegen_init(pass_opt_t* opt)
   LLVMInitializeNativeTarget();
   LLVMInitializeAllTargets();
   LLVMInitializeAllTargetMCs();
+  LLVMInitializeAllTargetInfos();
   LLVMInitializeAllAsmPrinters();
   LLVMInitializeAllAsmParsers();
   LLVMEnablePrettyStackTrace();
diff --git src/libponyc/codegen/genprim.c src/libponyc/codegen/genprim.c
index 8afbd81..b9cfe7d 100644
--- src/libponyc/codegen/genprim.c
+++ src/libponyc/codegen/genprim.c
@@ -690,7 +690,7 @@ static void fp_as_bits(compile_t* c)
 
 static void make_cpuid(compile_t* c)
 {
-#ifdef PLATFORM_IS_X86
+#if 0 // PLATFORM_IS_X86
   LLVMTypeRef elems[4] = {c->i32, c->i32, c->i32, c->i32};
   LLVMTypeRef r_type = LLVMStructTypeInContext(c->context, elems, 4, false);
   LLVMTypeRef f_type = LLVMFunctionType(r_type, &c->i32, 1, false);
@@ -713,7 +713,7 @@ static void make_cpuid(compile_t* c)
 
 static void make_rdtscp(compile_t* c)
 {
-#ifdef PLATFORM_IS_X86
+#if 0 // PLATFORM_IS_X86
   // i64 @llvm.x86.rdtscp(i8*)
   LLVMTypeRef f_type = LLVMFunctionType(c->i64, &c->void_ptr, 1, false);
   LLVMValueRef rdtscp = LLVMAddFunction(c->module, "llvm.x86.rdtscp", f_type);
#+END_SRC

** Patch
#+BEGIN_SRC docker :tangle Dockerfile :padline yes
WORKDIR /build
COPY ponyc_cross_compiler.patch /build/pony
RUN git clone https://github.com/ponylang/ponyc.git ponyc
WORKDIR /build/ponyc
RUN patch -p0 < /build/pony/ponyc_cross_compiler.patch
#+END_SRC

** Build
Build hacked =ponyc= (based on:
https://bluishcoder.co.nz/2015/12/17/cross-compile-pony-programs-for-android.html)
for cross compiling pony code for armhf:
#+BEGIN_SRC docker :tangle Dockerfile :padline yes
RUN CXX="g++ -m32" make config=debug bits=32 verbose=true ponyc
#+END_SRC

** Install Pony Binary
We'd like to have a minimized container. Do a bit of cleanup (removing
Pony sources) and then install the compiler and rt library. Add a
convenience script to call the compiler from outside the container.

#+BEGIN_SRC docker :tangle Dockerfile :padline yes
RUN make install
RUN which ponyc
RUN which llvm-as
RUN which llc

RUN mkdir /data
WORKDIR /data
COPY runasuser.sh /root/ 
ENTRYPOINT ["/root/runasuser.sh"]
#+END_SRC

* Test Cross Compile Container

** Helloworld
Here's a sample Pony program.
#+BEGIN_SRC pony :tangle main.pony :padline yes
actor Main
  new create(env: Env) =>
    env.out.print("Hello, world!")

#+END_SRC

** The ARM GCC Wrapper
#+BEGIN_SRC sh :tangle arm-linux-gnueabihf-gcc :shebang "#!/bin/bash" :padline yes
GCC="/build/rpi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-gcc"
# run the container as a user to simplify writing files outside the container
docker run --rm -it -v $(pwd):$(pwd) -w $(pwd) lispmeister/rpxp -U fix -u 1000 -G fix -g 1000  $GCC "$@"
#+END_SRC

** The LLVM Wrapper
#+BEGIN_SRC sh :tangle llvm-as :shebang "#!/bin/bash" :padline yes
docker run --rm -it -v $(pwd):$(pwd) -w $(pwd) \
       lispmeister/rpxp -U fix -u 1000 -G fix \
       -g 1000 /usr/bin/llvm-as "$@"
#+END_SRC

** The LLC Wrapper
#+BEGIN_SRC sh :tangle llc :shebang "#!/bin/bash" :padline yes
docker run --rm -it -v $(pwd):$(pwd) -w $(pwd) \
       lispmeister/rpxp -U fix -u 1000 -G fix \
       -g 1000 /usr/bin/llc "$@"
#+END_SRC

** The Build Script
#+BEGIN_SRC sh :tangle build.sh :shebang "#!/bin/bash" :padline yes
./ponyc --triple arm-linux-gnueabihf -rir

./llvm-as rpxp.ll
./llc -mtriple=arm-linux-gnueabihf \
      rpxp.bc \
      -o rpxp.o \
      -filetype=obj

./arm-linux-gnueabihf-gcc -v \
        -o ./helloworld \
        -O3 -march=armv7-a -flto -fuse-linker-plugin \
        -fuse-ld=gold \
        ./rpxp.o \
        -L"/usr/local/lib" \
        -L"/home/vagrant/arm/ponyc/build/debug/" \
        -L"/home/vagrant/arm/ponyc/build/debug/../../packages" \
        -L"/usr/local/lib" \
        -Wl,--start-group \
        -l"rt" \
        -Wl,--end-group  \
        -lponyrt -lpthread -ldl -lm
#+END_SRC



